library(swirl)
swirl()
submit()
mad_labs(place=London, adjustive = "beautiful", noun = "dog")
mad_libs(place=London, adjustive = "beautiful", noun = "dog")
mad_libs(place= "London", adjustive = "beautiful", noun = "dog")
submit()
paste(left, right, sep = " ")
"%p%" <- function(left, right){ # Remember to add arguments!
paste(left, right, sep = " ")
}
submit()
'Hello' %% 'student'
'Hello' %p% 'student'
"%p%" <- function(left, right){ # Remember to add arguments!
paste(left, right, sep = " ")
}
"Hello" %p% "student"
'Hello' %p% 'student'
bye
bye()
swirl()
head(flags)
dim(flags)
bye()
exit()
bye()
swirl()
library(swirl)
swirl()
2
1
bye()
swirl()
"%p%" <- function(left, right){ # Remember to add arguments!
paste(left, right, sep = " ")
}
submit()
"Hello" %p% "student!"
'Hello' %p% 'student!'
"Hello" %p% "student!"
"%p%" <- function(left, right){ # Remember to add arguments!
paste(left, right, sep = " ")
}
"Hello" %p% "student!"
"Hello" %p% "student!"
submit()
"Hello" %p% "student!"
"%p%" <- function(left, right){ # Remember to add arguments!
paste(left, right, sep = " ")
}
submit()
"Hello" %p% "student!"
"%p%" <- function(left, right){ # Remember to add arguments!
paste(left, right, sep = " ")
}
"Hello" %p% "student!"
help()
swirl()
submit()
"Hello" %p% "student!"
"%p%" <- function(){ # Remember to add arguments!
}
"Hello" %p% "student!"
"Hello" %p% "student!"
"%p%" <- function(left, right){ # Remember to add arguments!
paste(left, right, sep = " ")
}
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lappy(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply()
?sapply
cls_vect
sapply()
lapply()
lapply(cls_vect)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags@organge)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flags_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes)
lapply()
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
(c(3, 4, 5, 5, 5, 6, 6)).
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flag_shapes, range)
unique_vals <- lapply(flag, unique)
unique_vals <- lapply(flags, unique)
unique_vals
unique_vals <- lapply(flags, unique)
length(unique_vals)
sapply(unique_vals, length())
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$landmass, summary)
source("makeCacheMatrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, rnorm=4 ncol=4))
pmatrix <- makecacheMatrix(matrix(1:16, rnorm=4 ncol=4))
pmatrix <- makecacheMatrix(matrix(1:16, rnorm=4, ncol=4))
source("makecacheMartix.R")
source("makeCacheMartix.R")
source("makeChacheMarix.R")
source("makeCacheMatrix.R")
pmartix <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
pmatrix$get()
pmartix$get()
pmartix$getm()
cachesolve(pmartix)
cachemean(pmatrix)
cachemean()
cachemean(pmartix)
cachemean(pmartix)
cachemean(x$getmean)
cachemean(pmatrix)
source("makeCacheMatrix.R")
pmartix <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
pmartix$getm()
cachemean(pmatrix)
pmartix <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
cacheSolve(pmatrix)
source("makeCacheMatrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
source("makeCacheMatrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4)
)
patrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
source("makeCacheMatrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
source("makeCacheMatrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
source("makeCacheMatrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
source("makeCacheMatrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4)
)
inv <- solve(mat, ...)
source("makeCacheMatrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
source("makeCacheMatrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
source("makeCacheMatrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
source("makeCacheMatrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
source("makeCacheMatrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16), nrow = 4, ncol = 4)
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
source("makeCacheMatrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol= 4))
source("makeCacheMatrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$set()
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
